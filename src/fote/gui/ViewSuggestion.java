package fote.gui;

import fote.FOTE;
import fote.controller.SuggestionLogic;
import fote.entry.Comment;
import fote.entry.Suggestion;
import fote.model.UserModel;
import fote.util.MongoHelper;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Evan
 */
public class ViewSuggestion extends javax.swing.JDialog {

    private Suggestion suggestion;

    /**
     * Creates new form ViewSuggestion
     */
    public ViewSuggestion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setTitle("Suggestion");
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public ViewSuggestion(java.awt.Frame parent, boolean modal, Suggestion suggestion) {
        super(parent, modal);
        this.setTitle("Suggestion");
        initComponents();
        this.suggestion = suggestion;
        setViewSuggestion(suggestion);
        this.setLocationRelativeTo(null);
    }

    private void setViewSuggestion(Suggestion s) {
        setSuggestion(s);
        UserModel userModel = new UserModel();
        authorTextField.setText(userModel.getUser(s.getAuthor()).getFullName());
        subjectTextField.setText(s.getSubject());
        descriptionTextArea.setText(s.getDescription());
        attachmentsComboBox.setModel(new DefaultComboBoxModel(s.getAttachments().toArray(new String[s.getAttachments().size()])));

        if(getSuggestion().getAuthor() != FOTE.getUser().getId()) {
            editButton.setVisible(false);
            deleteButton.setVisible(false);
        }
        setComments();
    }
    /**
     * Separate method that sets the comments in the comment view
     */
    private void setComments() {
        UserModel userModel = new UserModel();
        ArrayList<Comment> comments = SuggestionLogic.getComments(getSuggestion());
        commentsTextArea.setText("");
        for(Comment c : comments){
            commentsTextArea.setText(commentsTextArea.getText() +
                    c.getText() + "\n-"
                    + userModel.getUser(c.getAuthor()).getFullName() +
                    "\n---------------------\n");
        }
    }

   /**
     * 
     * @return The suggestion the user is viewing
     */
    private Suggestion getSuggestion(){
        return this.suggestion;
    }

    /**
     * 
     * @param s The suggestion we are viewing
     */
    private void setSuggestion(Suggestion s){
        this.suggestion = s;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        authorLabel = new javax.swing.JLabel();
        authorTextField = new javax.swing.JTextField();
        subjectLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        addCommentLabel = new javax.swing.JLabel();
        postCommentButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        addCommentTextArea = new javax.swing.JTextArea();
        attachmentsLabel = new javax.swing.JLabel();
        newAttachmentButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        commentsTextArea = new javax.swing.JTextArea();
        commentLabel = new javax.swing.JLabel();
        attachmentsComboBox = new javax.swing.JComboBox();
        downloadButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        authorLabel.setText("Author:");

        authorTextField.setEditable(false);

        subjectLabel.setText("Subject:");

        descriptionLabel.setText("Description:");

        subjectTextField.setEditable(false);

        addCommentLabel.setText("Add Comment:");

        postCommentButton.setText("Post");
        postCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postCommentButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setColumns(1);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(3);
        jScrollPane1.setViewportView(descriptionTextArea);

        addCommentTextArea.setColumns(1);
        addCommentTextArea.setLineWrap(true);
        addCommentTextArea.setRows(1);
        jScrollPane2.setViewportView(addCommentTextArea);

        attachmentsLabel.setText("Attachments:");

        newAttachmentButton.setText("New Attachment");
        newAttachmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAttachmentButtonActionPerformed(evt);
            }
        });

        commentsTextArea.setEditable(false);
        commentsTextArea.setColumns(20);
        commentsTextArea.setLineWrap(true);
        commentsTextArea.setRows(5);
        jScrollPane3.setViewportView(commentsTextArea);

        commentLabel.setText("Comments:");

        attachmentsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addCommentLabel)
                                    .addComponent(attachmentsLabel)
                                    .addComponent(commentLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(attachmentsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(downloadButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(newAttachmentButton))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2)
                                            .addComponent(jScrollPane3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(postCommentButton))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(authorLabel)
                                    .addComponent(subjectLabel)
                                    .addComponent(descriptionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(subjectTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(authorTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorLabel)
                    .addComponent(authorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectLabel)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAttachmentButton)
                    .addComponent(downloadButton)
                    .addComponent(attachmentsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attachmentsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addCommentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commentLabel))
                    .addComponent(postCommentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void postCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postCommentButtonActionPerformed

        boolean success = SuggestionLogic.addComment(getSuggestion(), addCommentTextArea.getText());
        if (success) {
            JOptionPane.showMessageDialog(this, "Comment successfully added");
            addCommentTextArea.setText("");
            commentsTextArea.setText("");
            setViewSuggestion(getSuggestion());
            setComments();
            FOTE.getMainFrame().loadSuggestions();
        } else {
            JOptionPane.showMessageDialog(this, "Comment could not be added. Please try again");
        }
    }//GEN-LAST:event_postCommentButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        if (attachmentsComboBox.getSelectedItem() != null){
            JFileChooser filechooser = new JFileChooser();
            filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int result = filechooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
               String path = filechooser.getCurrentDirectory().toString()
            + File.separatorChar + filechooser.getSelectedFile().getName();
                  String fileNameDB = getSuggestion().getSubject() + "-" + attachmentsComboBox.getSelectedItem().toString();
                  String fileName = attachmentsComboBox.getSelectedItem().toString();
                if(MongoHelper.download(fileNameDB, path, fileName)){
                JOptionPane.showMessageDialog(this, "File downloaded!");
                }
                else{
                    JOptionPane.showMessageDialog(this,
                "Attachment failed to download",
                "Error",
                JOptionPane.ERROR_MESSAGE);
                }

                if (result == JFileChooser.CANCEL_OPTION) {
                    // Disregard
                }
            }
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void newAttachmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAttachmentButtonActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int result = filechooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
         String path = filechooser.getCurrentDirectory().toString()
            + File.separatorChar + filechooser.getSelectedFile().getName();
           String fileNameDB = getSuggestion().getSubject() + "-" + filechooser.getSelectedFile().getName();
           if(MongoHelper.upload(path, fileNameDB)){
               getSuggestion().getAttachments().add(fileNameDB);
               JOptionPane.showMessageDialog(this,
                   "Attachment successfully uploaded");
               setViewSuggestion(getSuggestion());
           }
           else{
               JOptionPane.showMessageDialog(this,
                "Attachment failed to upload",
                "Error",
                JOptionPane.ERROR_MESSAGE);
           }
        if (result == JFileChooser.CANCEL_OPTION) {
            // Disregard
            }
        }
    }//GEN-LAST:event_newAttachmentButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        new CreateSuggestion(FOTE.getMainFrame(), true, getSuggestion()).setVisible(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        boolean success = SuggestionLogic.deleteSuggestion(this.getSuggestion());
        if (success) {
            FOTE.getMainFrame().loadSuggestions();
            this.dispose();
        } else {
            System.err.println("Could not delete suggestion");
            JOptionPane.showMessageDialog(this,
                "Error while deleting suggestion. Please try again",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSuggestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSuggestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSuggestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSuggestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
//                new ViewSuggestion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addCommentLabel;
    private javax.swing.JTextArea addCommentTextArea;
    private javax.swing.JComboBox attachmentsComboBox;
    private javax.swing.JLabel attachmentsLabel;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JTextField authorTextField;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JTextArea commentsTextArea;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton newAttachmentButton;
    private javax.swing.JButton postCommentButton;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextField subjectTextField;
    // End of variables declaration//GEN-END:variables
}
